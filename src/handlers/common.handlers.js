import bot from "../config/bot.js";
import User from "../models/user.js";
import { saveLang, selectLang } from "./lang.handler.js";
import axios from 'axios';
import fs from 'fs';
import { 
    sendHomeMenu, 
    userSection,
    requestsSection,
    literatureSection,
    messagesSection
} from './menu.handlers.js';
import { Keyboard } from "grammy";
import { 
    handleError, 
    validateContent, 
    validateFullName, 
    validatePhone,
    sanitizeInput,
    isSessionExpired 
} from "../validates/complainValidate.js";
import { regions } from '../data/regions.js';

const SESSION_TIMEOUT = 15 * 60 * 1000; // 15 daqiqa
export const complaintSteps = {};

// Eng tepaga qo'shing
const createKeyboard = (buttonText) => {
    return new Keyboard()
        .text(buttonText)
        .row()
        .oneTime()
        .resized();
};


// Qiziqarli ma'lumotlar uchun handler
export const handleInterestingMaterials = async (ctx, lang) => {
    try {
        console.log('Qiziqarli ma\'lumotlar bo\'limiga o\'tish');

        const materials = [
            {
                filename: "tatil_boyicha.pdf",
                url: `${process.env.IMAGEKIT_URL_ENDPOINT}/qiziqarli_malumot/tatil_boyicha.pdf`,
                description: "üë®‚Äçüíª Xodimga mehnat ta'tillarini shakllantirish, berish hamda ta'tillarni rasmiylashtirish bo'yicha tavsiyalar "
            }
        ];

        await ctx.reply(
            lang === "UZB" 
                ? "üìö Qiziqarli ma'lumotlarni yuborish boshlanmoqda..."
                : "üìö –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤..."
        );

        for (const material of materials) {
            try {
                await ctx.replyWithDocument(material.url, {
                    caption: lang === "UZB"
                        ? `üìö ${material.description}\n\nFayl: ${material.filename}`
                        : `üìö ${material.description}\n\n–§–∞–π–ª: ${material.filename}`,
                    filename: material.filename
                });
            } catch (error) {
                console.error(`Error sending material ${material.filename}:`, error);
                await ctx.reply(
                    lang === "UZB"
                        ? `‚ùå Faylni yuborishda xatolik yuz berdi: ${material.filename}`
                        : `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: ${material.filename}`
                );
            }
        }
    } catch (error) {
        console.error('Error in Qiziqarli ma\'lumotlar handler:', error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
    }
};

// Video qo'llanmalar uchun handler
export const handleVideoTutorials = async (ctx, lang) => {
    try {
        console.log('Video qo\'llanmalar bo\'limiga o\'tish');
        const materials = [
            {
                filename: "ijro.gov.uz.mp4",
                url: "https://ik.imagekit.io/rk2mqxak6/videolar/ijro.gov.uz.mp4",
                description: "¬´Ijro.gov.uz¬ª tizimi haqida video qo'llanma"
            },
            {
                filename: "ijro_intizomi_qarori.mp4",
                url: "https://ik.imagekit.io/rk2mqxak6/videolar/ijro_intizomi_qarori.mp4",
                description: "Ijro intizomi bo'yicha Prezident qarori"
            }
        ];

        await ctx.reply(
            lang === "UZB" 
                ? "üìπ Video qo'llanmalarni yuborish boshlanmoqda..."
                : "üìπ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ-—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤..."
        );

        for (const material of materials) {
            try {
                // Videoni fayl sifatida yuborish
                await ctx.replyWithDocument(material.url, {
                    caption: lang === "UZB"
                        ? `üìπ ${material.description}`
                        : `üìπ ${material.description}`,
                    filename: material.filename
                });
                
                // Har bir video orasida kutish
                await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (error) {
                console.error(`Error sending video ${material.filename}:`, error);
                await ctx.reply(
                    lang === "UZB"
                        ? `‚ùå Videoni yuborishda xatolik: ${material.filename}`
                        : `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: ${material.filename}`
                );
            }
        }
    } catch (error) {
        console.error('Error in Video tutorials handler:', error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
    }
};


// Namunaliy blanklar uchun handler
export const handleSamplefarms = async (ctx, lang) => {
    try {
        console.log('Namunaliy blanklar bo\'limiga o\'tish');
        const farms = [
            {
                filename: "blanklar.zip",
                url: `${process.env.IMAGEKIT_URL_ENDPOINT}/blanklar.zip`,
                description: "Na'munaviy blanklar va ishlab chiqish namunasi"
                
            },
            // {
            //     filename: "blanklar.zip",
            //     url: "https://ik.imagekit.io/rk2mqxak6/blanklar.zip",
            //     description: "Xat blanka namunasi"
            // },
            // {
            //     filename: "Farmoish.doc",
            //     url: "https://ik.imagekit.io/rk2mqxak6/blanklar/Farmoish.doc",
            //     description: "Farmoish blanka namunasi"
            // },
           
        ];

        await ctx.reply(
            lang === "UZB" 
                ? "üìù Namunaliy blanklarni yuborish boshlanmoqda..."
                : "üìù –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ –±–ª–∞–Ω–∫–æ–≤..."
        );

        for (const farm of farms) {
            try {
                await ctx.replyWithDocument(farm.url, {
                    caption: lang === "UZB"
                        ? `üìù ${farm.description}\n\nFayl: ${farm.filename}`
                        : `üìù ${farm.description}\n\n–§–∞–π–ª: ${farm.filename}`,
                    filename: farm.filename
                });
            } catch (error) {
                console.error(`Error sending farm ${farm.filename}:`, error);
                await ctx.reply(
                    lang === "UZB"
                        ? `‚ùå Blankni yuborishda xatolik: ${farm.filename}`
                        : `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–∞–Ω–∫–∞: ${farm.filename}`
                );
            }
        }
    } catch (error) {
        console.error('Error in Sample farms handler:', error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
    }
};

// Kerakli hujjatlar uchun handler
export const handleRequiredDocuments = async (ctx, lang) => {
    try {
        console.log('Kerakli hujjatlar bo\'limiga o\'tish');
        const documents = [
            {
                filename: "Mehnat_kodeksi.pdf",
                url: `${process.env.IMAGEKIT_URL_ENDPOINT}/kerakli_hujjatlar/Mehnat_kodeksi.pdf`,
                description: "Mehnat kodeksi(yangi taxriri)"
            },
            {
                filename: "Ish_yuritish.pdf",
                url: `${process.env.IMAGEKIT_URL_ENDPOINT}/kerakli_hujjatlar/Ish_yuritish.pdf`,
                description: "Davlat tilida ish yuritish to'g'risida (Amaliy qo'llanma)"
            }
        ];

        await ctx.reply(
            lang === "UZB" 
                ? "üìÑ Kerakli hujjatlarni yuborish boshlanmoqda..."
                : "üìÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
        );

        for (const doc of documents) {
            try {
                await ctx.replyWithDocument(doc.url, {
                    caption: lang === "UZB"
                        ? `üìÑ ${doc.description}\n\nFayl: ${doc.filename}`
                        : `üìÑ ${doc.description}\n\n–§–∞–π–ª: ${doc.filename}`,
                    filename: doc.filename
                });
            } catch (error) {
                console.error(`Error sending document ${doc.filename}:`, error);
                await ctx.reply(
                    lang === "UZB"
                        ? `‚ùå Hujjatni yuborishda xatolik: ${doc.filename}`
                        : `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${doc.filename}`
                );
            }
        }
    } catch (error) {
        console.error('Error in Required documents handler:', error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
    }
};




// Call markaz uchun handler
export const handleCallCenter = async (ctx, lang) => {
    try {
        const message = lang === "UZB"
            ? "üìû Call markaz raqami: +998 71 237 91 21\n\nIsh vaqti: 09:00 - 18:00"
            : "üìû –ù–æ–º–µ—Ä Call —Ü–µ–Ω—Ç—Ä–∞: +998 71 237 91 21\n\n–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 09:00 - 18:00";

        await ctx.reply(message, {
            reply_markup: {
                keyboard: [
                    [lang === "UZB" ? "‚¨ÖÔ∏è Orqaga" : "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
                ],
                resize_keyboard: true
            }
        });
    } catch (error) {
        console.error('Error in Call center handler:', error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
    }
};

// Yangi xabarlarni olish uchun handler
export const handleNewMessages = async (ctx, lang) => {
    try {
        // Get channel info
        const channelInfo = await ctx.api.getChat("@uzrailways_uz");
        
        // Try to get the last message from the channel
        try {
            const message = await ctx.api.copyMessage(
                ctx.chat.id,
                "@uzrailways_uz",
                channelInfo.pinned_message?.message_id || 1,
                {
                    parse_mode: "HTML"
                }
            );

            await ctx.reply(
                lang === "UZB"
                    ? "‚úÖ Oxirgi xabar yuborildi"
                    : "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            );
        } catch (error) {
            console.error("Error copying message:", error);
            await ctx.reply(
                lang === "UZB"
                    ? "Kechirasiz, xabarni olishda muammo yuzaga keldi. Iltimos, to'g'ridan-to'g'ri kanalga tashrif buyuring: @uzrailways_uz"
                    : "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é: @uzrailways_uz"
            );
        }
    } catch (error) {
        console.error("Error in handleNewMessages:", error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi"
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        );
    }
};

// Barcha xabarlarni ko'rish uchun handler
export const handleAllNews = async (ctx, lang) => {
    console.log("==");
    
    try {
        const newsUrl = lang === "UZB" 
            ? "https://railway.uz/uz/informatsionnaya_sluzhba/novosti/"
            : "https://railway.uz/ru/informatsionnaya_sluzhba/novosti/";

        await ctx.reply(
            lang === "UZB"
                ? `<a href="${newsUrl}">O'zbekiston Temir Yo'llari rasmiy yangiliklar sahifasi</a>`
                : `<a href="${newsUrl}">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –£–∑–±–µ–∫–∏—Å—Ç–æ–Ω –¢–µ–º–∏—Ä –ô—É–ª–ª–∞—Ä–∏</a>`,
            {
                parse_mode: "HTML",
                disable_web_page_preview: false
            }
        );
    } catch (error) {
        console.error("Error in handleAllNews:", error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi"
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        );
    }
};

// Start komandasi uchun handler
export const handleStart = async (ctx) => {
    try {
        console.log('Start komandasi ishga tushdi');
        const user_id = ctx?.update?.message?.from?.id;
        const user = await User.findOne({ user_id });
        
        if (user) {
            await sendHomeMenu(ctx, user.user_lang);
        } else {
            await selectLang(ctx);
        }
    } catch (error) {
        console.error('Start komandasida xatolik:', error);
        await ctx.reply("‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
};

// Menyu bo'limlarini boshqarish uchun handler
export const handleMenu = async (ctx, lang) => {
    try {
        console.log('Menyu bo\'limi tanlandi');
        const message = ctx.message.text;
        
        if (message === "üßëüèæ‚Äçü§ù‚Äçüßëüèæ Foydalanuvchilar" || message === "üßëüèæ‚Äçü§ù‚Äçüßëüèæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏") {
            await userSection(ctx, lang);
        } else if (message === "ü™ß Murojaatlar" || message === "ü™ß –ó–∞–ø—Ä–æ—Å—ã") {
            await requestsSection(ctx, lang);
        } else if (message === "üóÉÔ∏è Adabiyotlar" || message === "üóÉ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞") {
            await literatureSection(ctx, lang);
        } else if (message === "üì£ Xabarlar" || message === "üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è") {
            await messagesSection(ctx, lang);
        } else if (message === "‚ôªÔ∏è Tilni o'zgartirish" || message === "‚ôªÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫") {
            await selectLang(ctx);
        }
    } catch (error) {
        console.error('Menyu bo\'limini tanlashda xatolik:', error);
        await ctx.reply(
            lang === "UZB" 
                ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        );
    }
};

// Til tanlash uchun handler
export const handleLanguage = async (ctx) => {
    try {
        console.log('Til tanlash tugmasi bosildi');
        const message = ctx.message.text;
        
        if (message === "üá∫üáø O'zbek tili") {
            await saveLang(ctx, "UZB");
        } else if (message === "üá∑üá∫ –†—É—Å—Å–∫–∏–π") {
            await saveLang(ctx, "RUS");
        }
    } catch (error) {
        console.error('Til tanlashda xatolik:', error);
        await ctx.reply("‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
};

// Orqaga qaytish uchun handler
export const handleBack = async (ctx, lang) => {
    try {
        console.log('Orqaga qaytish tugmasi bosildi');
        const user_id = ctx?.update?.message?.from?.id;
        const user = await User.findOne({ user_id });
        
        if (user) {
            await sendHomeMenu(ctx, user.user_lang);
        } else {
            await sendHomeMenu(ctx, lang);
        }
    } catch (error) {
        console.error('Orqaga qaytishda xatolik:', error);

            lang === "UZB" 
                ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
    }
};


export const startComplaintFlow = async (ctx) => {
    try {
        const userId = ctx.from.id;
        const user = await User.findOne({ user_id: userId });
        const lang = user?.user_lang || "UZB";

        complaintSteps[userId] = {
            step: "fullName",
            timestamp: Date.now(),
            lang: lang,
            data: {}
        };

        const fullNameKeyboard = createKeyboard(
            lang === "UZB" ? "üë§ F.I.SH. kiriting" : "üë§ –í–≤–µ—Å—Ç–∏ –§.–ò.–û."
        );

        await ctx.reply(
            lang === "UZB"
                ? "Shikoyat va takliflar yuborish uchun quyidagi bosqichlardan o'ting:"
                : "–ü—Ä–æ–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:",
            { reply_markup: fullNameKeyboard }
        );

        return true;
    } catch (error) {
        console.error('Shikoyat boshlash xatoligi:', error);
        await handleError(ctx, userId);
        return false;
    }
};

export const handleComplaintMessage = async (ctx) => {
    try {
        const userId = ctx.from.id;
        const userMessage = ctx.message?.text;
        
        if (!complaintSteps[userId]) return false;

        const lang = complaintSteps[userId].lang;
        const step = complaintSteps[userId].step;
        const sanitizedMessage = sanitizeInput(userMessage);

        switch (step) {
            case "fullName":
                if (userMessage === (lang === "UZB" ? "üë§ F.I.SH. kiriting" : "üë§ –í–≤–µ—Å—Ç–∏ –§.–ò.–û.")) {
                    complaintSteps[userId].step = "waitingFullName";
                    await ctx.reply(
                        lang === "UZB"
                            ? "üë§ F.I.SH.ni to'liq kiriting:"
                            : "üë§ –í–≤–µ–¥–∏—Ç–µ –§.–ò.–û. –ø–æ–ª–Ω–æ—Å—Ç—å—é:"
                    );
                    return true;
                }
                return false;

            case "waitingFullName":
                if (!validateFullName(sanitizedMessage)) {
                    await ctx.reply(
                        lang === "UZB"
                            ? "‚ùå Noto'g'ri F.I.SH. Iltimos, qaytadan kiriting."
                            : "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§.–ò.–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞."
                    );
                    return true;
                }

                complaintSteps[userId].data.fullName = sanitizedMessage;
                complaintSteps[userId].step = "address";
                
                const addressKeyboard = new Keyboard()
                    .oneTime()
                    .resized();
                
                // Viloyatlarni 2 tadan qilib joylashtirish
                Object.keys(regions).forEach((region, index) => {
                    if (index % 2 === 0) {
                        addressKeyboard.row();
                    }
                    addressKeyboard.text(region);
                });

                await ctx.reply(
                    lang === "UZB"
                        ? "üìç Viloyatingizni tanlang:"
                        : "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å:",
                    { reply_markup: addressKeyboard }
                );
                return true;

            case "address":
                if (!regions[userMessage]) {
                    await ctx.reply(
                        lang === "UZB"
                            ? "‚ùå Iltimos, viloyatni ro'yxatdan tanlang"
                            : "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"
                    );
                    return true;
                }

                complaintSteps[userId].data.selectedRegion = userMessage;
                complaintSteps[userId].step = "waitingDistrict";

                // Tumanlar tugmalarini yaratish
                const districtKeyboard = new Keyboard()
                    .oneTime()
                    .resized();
                
                regions[userMessage].forEach((district, index) => {
                    if (index % 2 === 0) {
                        districtKeyboard.row();
                    }
                    districtKeyboard.text(district);
                });

                await ctx.reply(
                    lang === "UZB"
                        ? "üìç Tumaningizni tanlang:"
                        : "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:",
                    { reply_markup: districtKeyboard }
                );
                return true;

            case "waitingDistrict":
                const selectedRegion = complaintSteps[userId].data.selectedRegion;
                if (!regions[selectedRegion].includes(userMessage)) {
                    await ctx.reply(
                        lang === "UZB"
                            ? "‚ùå Iltimos, tumanni ro'yxatdan tanlang"
                            : "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
                    );
                    return true;
                }

                complaintSteps[userId].data.address = `${selectedRegion}, ${userMessage}`;
                complaintSteps[userId].step = "waitingPhone";
                
                await ctx.reply(
                    lang === "UZB"
                        ? "üìû Telefon raqamingizni kiriting:\nMasalan: +998901234567"
                        : "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: +998901234567"
                );
                return true;

            case "waitingPhone":
                if (!validatePhone(sanitizedMessage)) {
                    await ctx.reply(
                        lang === "UZB"
                            ? "‚ùå Noto'g'ri telefon raqam. Masalan: +998901234567"
                            : "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +998901234567"
                    );
                    return true;
                }
                complaintSteps[userId].data.phone = sanitizedMessage;
                complaintSteps[userId].step = "content";
                
                await ctx.reply(
                    lang === "UZB"
                        ? "üìù Murojaatingiz matnini kiriting:"
                        : "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:"
                );
                return true;

            case "content":
                if (!validateContent(sanitizedMessage)) {
                    await ctx.reply(
                        lang === "UZB"
                            ? "‚ùå Murojaat matni juda qisqa yoki uzun. 10-1000 belgi oralig'ida bo'lishi kerak."
                            : "‚ùå –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤."
                    );
                    return true;
                }
                complaintSteps[userId].data.content = sanitizedMessage;
                complaintSteps[userId].data.date = new Date().toISOString();

                try {
                    const adminMessage = lang === "UZB"
                        ? `<b>üì® Yangi murojaat:</b>\n\n` +
                          `üë§ F.I.SH.: ${complaintSteps[userId].data.fullName}\n` +
                          `üìç Manzil: ${complaintSteps[userId].data.address}\n` +
                          `üìû Telefon raqam: ${complaintSteps[userId].data.phone}\n` +
                          `üìù Matn: ${complaintSteps[userId].data.content}\n` +
                          `üìÖ Sana: ${new Date(complaintSteps[userId].data.date).toLocaleString('uz-UZ')}`
                        : `<b>üì® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>\n\n` +
                          `üë§ –§.–ò.–û.: ${complaintSteps[userId].data.fullName}\n` +
                          `üìç –ê–¥—Ä–µ—Å: ${complaintSteps[userId].data.address}\n` +
                          `üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${complaintSteps[userId].data.phone}\n` +
                          `üìù –¢–µ–∫—Å—Ç: ${complaintSteps[userId].data.content}\n` +
                          `üìÖ –î–∞—Ç–∞: ${new Date(complaintSteps[userId].data.date).toLocaleString('ru-RU')}`;

                    // Guruhga yuborish
                    await ctx.api.sendMessage(process.env.ADMIN_GROUP_ID, adminMessage, { parse_mode: "HTML" });
                    
                    await ctx.reply(
                        lang === "UZB"
                            ? "‚úÖ Murojaatingiz muvaffaqiyatli yuborildi. Tez orada ko'rib chiqiladi."
                            : "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                    );
                } catch (error) {
                    console.error('Admin guruhiga yuborishda xatolik:', error);
                    await ctx.reply(
                        lang === "UZB"
                            ? "‚ùå Texnik nosozlik. Ma'muriyatga murojaat qiling."
                            : "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    );
                }

                delete complaintSteps[userId];
                return true;
        }
        return true;
    } catch (error) {
        console.error('Shikoyatni qayta ishlashda xatolik:', error);
        await handleError(ctx, ctx.from.id);
        return false;
    }
};
export const handleUserList = async (ctx, lang) => {
    try {
        const users = await User.find({})
            .sort({ _id: -1 })  // eng oxirgi qo'shilganlar
            .limit(10)          // oxirgi 10 ta
            .select('username first_name last_name');  // faqat kerakli maydonlar

        if (!users || users.length === 0) {
            await ctx.reply(
                lang === "UZB"
                    ? "‚ùå Hozircha foydalanuvchilar yo'q"
                    : "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            );
            return;
        }

        const userList = users.map((user, index) => {
            const username = user.username ? `@${user.username}` : 'username yo\'q';
            const name = [user.first_name, user.last_name].filter(Boolean).join(' ') || 'ism ko\'rsatilmagan';
            return `${index + 1}. ${name} (${username})`;
        }).join('\n');

        await ctx.reply(
            lang === "UZB"
                ? `üìä Oxirgi 10 ta foydalanuvchi:\n\n${userList}`
                : `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n${userList}`
        );
    } catch (error) {
        console.error('Foydalanuvchilar ro\'yxatini olishda xatolik:', error);
        await ctx.reply(
            lang === "UZB"
                ? "‚ùå Xatolik yuz berdi. Iltimos, qayta urinib ko'ring."
                : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
    }
};
